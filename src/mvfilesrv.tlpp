#INCLUDE "protheus.ch"

#DEFINE TITLE_MODAL ""
#DEFINE CRLF Chr(13) + Chr(10)

#DEFINE PATH_SERVER GETF_RETDIRECTORY
#DEFINE PATH_CLIENT GETF_LOCALHARD + GETF_RETDIRECTORY

/*/{Protheus.doc} mvfilesrv
Rotina destinada a realizar a transferencia de arquivos entre o cliente e o servidor.

@author Gabriel H. Klok

@type user function
@since 09/11/2020
@version 1.0
/*/
User Function MVFILESRV()
    Local oDialog
    Local oRadio
    Local oInputDestiny
    Local oBtnDirDestiny
    Local oInputOrigin
    Local oBtnDirOrigin
    Local oLabelListFiles
    Local oListFiles
    Local oBtnCancel
    Local oBtnSend
    Local oTFont := TFont():New('Arial',, -12,, .f.)

    Local lClean := .t.
    Local lPixel := .t.
    Local nRadio := 1
    Local aStatusFiles := {}
    Local aRadios := {"Cliente p/ Servidor", "Servidor p/ Cliente"}
    Local cDirDestiny := Space(240)
    Local cDirOrigin := Space(240)

    Local bRadio := {|u| IIf(PCount()() == 0, nRadio, nRadio := u)}
    Local bRefresh := {|| cDirDestiny := "", cDirOrigin := "", aFiles := {}, oInputDestiny:Refresh(), oInputOrigin:Refresh(), oListFiles:SetArray({}) }
    Local bDestiny := {|u| IIf(PCount()() == 0, cDirDestiny, cDirDestiny := u)}
    Local bOrigin := {|u| IIf(PCount()() == 0, cDirOrigin, cDirOrigin := u)}
    Local bDirDestiny := {|| cDirDestiny := getPath(nRadio, 1)}
    Local bDirOrigin := {|| cDirOrigin := getPath(nRadio, 2), oListFiles:SetArray( getFiles(cDirOrigin) )}
    Local bSend := {|| IIf( modalResponse( ! send(cDirDestiny, oListFiles:aItems, IIf(nRadio = 1, "cpyt2s", "cpys2t"), @aStatusFiles), aStatusFiles, @lClean), oDialog:End(), IIf(lClean, Eval(bRefresh), Nil)) }

    oDialog := MsDialog():New(0, 0, 385, 550, "Copiar arquivos...",,,,,,,,, lPixel)
    oRadio := TRadMenu():New(5, 60, aRadios, bRadio, oDialog,, bRefresh,,,,,, 200, 10,,,, lPixel, .t.)

    oInputOrigin := TGet():New(16, 5, bOrigin, oDialog, 220, 10,,,,, oTFont,,, lPixel,,,,,,, .f.,,, cDirOrigin,,,,,,, "Diretório de origem", 1, oTFont,,,, .t.)
    oBtnDirOrigin := TButton():New(22, 230, "Buscar", oDialog, bDirOrigin, 40, 13,, oTFont,, lPixel)

    oInputDestiny := TGet():New(36, 5, bDestiny, oDialog, 220, 10,,,,, oTFont,,, lPixel,,,,,,, .f.,,, cDirDestiny,,,,,,, "Diretório de destino", 1, oTFont,,,, .t.)
    oBtnDirDestiny := TButton():New(42, 230, "Salvar em", oDialog, bDirDestiny, 40, 13,, oTFont,, lPixel)

    oLabelListFiles := TSay():New(60, 5, {|| "Arquivos selecionados:"}, oDialog,, oTFont,,,, lPixel,,, 70, 10)
    oListFiles := TListBox():New(70, 5,,, 265, 100,, oDialog,,,, lPixel,,, oTFont)
    
    oBtnCancel := TButton():New(175, 4, "Cancelar", oDialog, {|| oDialog:End() }, 40, 13,, oTFont,, lPixel)
    oBtnSend := TButton():New(175, 230, "Enviar", oDialog, bSend, 40, 13,, oTFont,, lPixel)

    oDialog:Activate()

    FreeObj(oDialog)
    FreeObj(oRadio)
    FreeObj(oInputDestiny)
    FreeObj(oBtnDirDestiny)
    FreeObj(oInputOrigin)
    FreeObj(oBtnDirOrigin)
    FreeObj(oLabelListFiles)
    FreeObj(oListFiles)
    FreeObj(oBtnCancel)
    FreeObj(oBtnSend)
    FreeObj(oTFont)
Return 


/*/{Protheus.doc} getPath
Função responsável por capturar diretórios.

@type static function
@since 09/11/2020
@version 1.0

@param nOrigin, numeric, Indica se origem da transferencia é o cliente ou o servidor.
@param nOpc, numeric, Indice se é a seleção de diretorio de origem ou destino.

@return cPath, caracter, Caminho até o diretório selecionado.
/*/
Static Function getPath(nOrigin, nOpc)
    Local cPath := ""
    cPath := cGetFile("Arquivos *|*.*", 'Selecione o diretorio para salvar o resultado...', 1, PlsMudSis('\'), .t., IIf(nOrigin = nOpc, PATH_SERVER, PATH_CLIENT), .t., .t.)
Return cPath


/*/{Protheus.doc} getFiles
Função responsável por pegar selecionar os arquivos desejados.

@type static function
@since 09/11/2020
@version 1.0

@param cPath, caracter, Caminho até o diretório aonde os arquivos seram selecionados.

@return aFiles, array, Array com os arquivos selecionados.
/*/
Static Function getFiles(cPath)
    Local aMatCol := {}
    Local aFiles := {}
    Local aFilesTmp

    AAdd(aMatCol, {"Arquivo", "@!", 100, .f.})
    AAdd(aMatCol, {"Tamanho", "@!", 30, .f.})
    AAdd(aMatCol, {"Data", "@!", 30, .f.})
    AAdd(aMatCol, {"Hora", "@!", 30, .f.})

    aFilesTmp := Directory(cPath + "*.*",, nil, .f.)
    AEval(aFilesTmp, {|x| x[2] := AllTrim(Str(x[2])), x[3] := DtoC(x[3]), x[5] := .f. })

    If PLSSELOPT("Selecione o(s) arquivos para enviar...", "Marca e Desmarca todos", aFilesTmp, aMatCol,,.t.,.t.,.f.)
        AEval(aFilesTmp, {|x| IIf(x[5], AAdd(aFiles, cPath + x[1]), ) })
    EndIf
Return aFiles


/*/{Protheus.doc} send
Função responsável por validar e enviar os arquivos.

@type static funtion
@since 09/11/2020
@version 1.0

@param cDirDestiny, caracter, Caminho do diretório de destino.
@param aFiles, array, Array com os arquivos a serem transferidos.
@param cFunction, caracter, Função que será executada para transferir.
@param aStatusFiles, array, Array com o status dos arquivos enviados.

@return lValid, logical, Indica se foi encontra algum erro no processo.
/*/
Static Function send(cDirDestiny, aFiles, cFunction, aStatusFiles)
    Local lValid := .t.
    Local cErrors := "Problemas identificados:" + replicate(CRLF, 2)

    If Empty(cDirDestiny) .or. ! ExistDir(cDirDestiny)
        cErrors += "  - Diretório de destino não existe e/ou não informado." + CRLF
        lValid := .f.
    EndIf 

    If Empty(aFiles)
        cErrors += "  - Não foram selecionados arquivos para transferência." + CRLF
        lValid := .f.
    EndIf 

    If ! lValid
        MsgStop(cErrors, TITLE_MODAL)
    EndIf 

    MsgRun("Transferindo arquivos...", TITLE_MODAL, {|| AEval(aFiles, {|x| AAdd(aStatusFiles, {x, &(cFunction)(x, cDirDestiny,, .f.)}) }) })
Return lValid


/*/{Protheus.doc} modalResponse
Função para mostrar telas de sucesso e erros.

@type static function
@since 09/11/2020
@version 1.0

@param lError, logical, Indica se aconteceu algum erro.
@param aStatusFiles, array, Array com o status dos arquivos enviados.
@param lClean, logical, Indica se deve ou não limpar os dados da tela.

@return lClose, logical, Indica se deve ou não fechar a rotina.
/*/
Static Function modalResponse(lError, aStatusFiles, lClean)
    Local lClose := .t.

    If lError
        lClose := ! MsgYesNo("Deseja corrigir?", TITLE_MODAL)
        lClean := IIf(lClose, lClean, .f.)
    Else
        MsgInfo("Arquivos enviados com SUCESSO!", TITLE_MODAL)
        If existErrorSend(aStatusFiles)
            lClose := ! MsgYesNo("Deseja enviar mais?")
        Else 
            lClose := ! MsgYesNo("Deseja tentar novamente?")
            lClean := IIf(lClose, lClean, .f.)
        EndIf 
    EndIf 
Return lClose


/*/{Protheus.doc} existErrorSend
Função responsável por verificar se algum arquivos não pode ser enviado.

@type static function
@since 09/11/2020
@version 1.0

@param aStatusFiles, array, Array com o status dos arquivos enviados.

@return lValid, logical, Indica se houve ou não erros no envio.
/*/
Static Function existErrorSend(aStatusFiles)
    Local lValid := .t.
    Local cErrors := ""

    AEval(aStatusFiles, {|x| IIf(x[2], Nil, cErrors += x[1] + CRLF)})

    If ! Empty(cErrors)
        MsgStop("Arquivos não enviados: " + Replicate(CRLF, 2) + cErrors, TITLE_MODAL)
        lValid := .f.
    EndIf
Return lValid
